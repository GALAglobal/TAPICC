<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article [
<!ENTITY % dbgenent SYSTEM "dbgenent.mod">
%dbgenent;
]>
<article version="5.1" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>XLIFF 2 Extraction and Merging Best Practice, Version &version;</title>
    <authorgroup>

      <!-- Editors appear in alphabetical order unless there is a lead editor among a group of editors -->
      <editor>
        <personname>David Filip</personname>
        <email>david.filip@adaptcentre.ie</email>
        <affiliation>
          <orgname>ADAPT Centre</orgname>
        </affiliation>
      </editor>

      <editor>
        <personname>Ján Husarčík</personname>
        <email>jhusarcik@moravia.com</email>
        <affiliation>
          <orgname>Moravia</orgname>
        </affiliation>
      </editor>

      <!-- WG Chairs should be given credit -->
      <othercredit role="chair">
        <personname>Rodolfo M. Raya</personname>
      </othercredit>
      <othercredit role="chair">
        <personname>Andreas Galambos</personname>
      </othercredit>
    </authorgroup>

    <keywordset>
      <keyword>XLIFF</keyword>
      <keyword>Extraction</keyword>
      <keyword>Merging</keyword>
      <keyword>Best Practice</keyword>
    </keywordset>

    <releaseinfo role="this-location-authoritative" />
    <releaseinfo role="this-location-pdf" />

    <releaseinfo role="previous-location-authoritative" />
    <releaseinfo role="previous-location-pdf" />

    <releaseinfo role="latest-location-authoritative" />
    <releaseinfo role="latest-location-pdf" />

    <releaseinfo role="committee">TAPICC T1/WG3</releaseinfo>
    <pubdate>&pubdate;</pubdate>
    <copyright>
      <year>&pubyear;</year>
      <holder>GALA TAPICC. All rights reserved.</holder>
    </copyright>
    <legalnotice role="additional">
      <title>Additional artifacts</title>
      <para>This prose specification is one component of a Work Product that also includes:</para>
      <itemizedlist>
        <listitem>
          <para>Extraction and merging examples from <link
              xlink:href="&this-locArts;extraction_examples/"
              >&this-locArts;extraction_examples/</link>
          </para>
          <para>An unstable editorial version of the examples might exist at <link
              xlink:href="&EDArts;extraction_examples/">&EDArts;extraction_examples/</link></para>
        </listitem>
      </itemizedlist>
    </legalnotice>

    <legalnotice role="related">
      <title>Related work</title>
      <para>This note provides informative best practice for XLIFF 2 Specifications:</para>
      <itemizedlist>
        <listitem>
          <para>XLIFF Version 2.1 <citation>[XLIFF-2.1]</citation></para>
        </listitem>
        <listitem>
          <para>XLIFF Version 2.0 <citation>[XLIFF-2.0]</citation></para>
        </listitem>
        <listitem>
          <para>ISO 21720:2017 <citation>[ISO XLIFF]</citation></para>
        </listitem>
      </itemizedlist>
    </legalnotice>

    <abstract>
      <para>This &releaseinfo; specification targets designers of XLIFF
          <firstterm>Extracting</firstterm> and <firstterm>Merging</firstterm> Tools for content
        owners. It gathers common problems that are prone to appear when
          <firstterm>Extracting</firstterm>
        <firstterm>XLIFF Documents</firstterm> from HTML, generic XML, or MarkDown. This
        specification shows why some <firstterm>Extraction</firstterm> approaches will cause issues
        during an <firstterm>XLIFF Roundtrip</firstterm>. This best practice guidance provides
        better thought through alternatives and shows how to use many of advanced XLIFF features for
        lossless Localization roundtrip of HTML and XML based content.</para>

    </abstract>
    <legalnotice role="status">
      <title>Status</title>
      <para>This &releaseinfo; was last revised by TAPICC &track;/&wg; or the TAPICC Steering
        Committee on the above date. The level of approval is also listed above. Check the “Latest
        version” location noted above for possible later revisions of this document.</para>
      <para>Contributions to this deliverable or subsequent versions of this deliverable can be made
        via the <link xlink:href="https://github.com/GALAglobal/TAPICC">GALA TAPICC GitHub
          Repository</link> subject to signing the <link
          xlink:href="https://www.gala-global.org/tapicc-legal-agreement">TAPICC Legal
          Agreement</link>.</para>
    </legalnotice>
    <legalnotice role="citation">
      <title>Citation format</title>
      <para>When referencing this specification the following citation format should be used:</para>
      <para><citation>XLIFF-EM-BP</citation></para>
      <para><emphasis>XLIFF 2 Extraction and Merging Best Practice, Version &version;</emphasis>
        Edited by David Filip and Ján Husarčík. &pubdate;. &stage; &substage;. &this-loc;.html.
        Latest version: &latest;.html.</para>
    </legalnotice>
    <legalnotice role="notices">
      <title>Notices</title>
      <para>Copyright © GALA TAPICC &pubyear;. All rights reserved.</para>
      <para> The Translation API Class and Cases (TAPICC) initiative is a collaborative,
        community-driven, open-source project to advance API standards in the localization industry.
        The overall purpose of this project is to provide a metadata and API framework on which
        users can base their integration, automation and interoperability efforts.</para>

      <para>The usage of all deliverables of this initiative - including this specification - is
        subject to open source license terms expressed in the BSD-3-Clause License and CC-BY 2.0
        License, the declared applicable licenses when the project was chartered. <itemizedlist>
          <listitem>
            <para>The 3-Clause BSD License (BSD-3 Clause): <link
                xlink:href="https://opensource.org/licenses/BSD-3-Clause"
                >https://opensource.org/licenses/BSD-3-Clause</link></para>
          </listitem>
          <listitem>
            <para>Creative Commons Legal Code (CC-BY 2.0): <link
                xlink:href="https://creativecommons.org/licenses/by/2.0/legalcode"
                >https://creativecommons.org/licenses/by/2.0/legalcode</link></para>
          </listitem>
        </itemizedlist></para>
    </legalnotice>
  </info>
  <!-- Terms and concepts defined in this section need to be highlighted thorough the specification using the firstterm element -->
  <glossary xml:id="Glossary">
    <title>Terminology and Concepts</title>
    <para>Apart form terminology and concepts defined here, this specification makes heavy use of
      terms defined in the XLIFF Standards <citation>[XLIFF-2.1]</citation> such as:
        <firstterm>Extractor</firstterm>, <firstterm>Merger</firstterm>, <firstterm>XLIFF
        Document</firstterm>, <firstterm>XLIFF defined</firstterm>, etc.</para>
    <glossentry>
      <glossterm>context hints</glossterm>
      <glossdef>
        <para><firstterm>XLIFF defined</firstterm> attributes on structural or inline elements
          providing additional contexts, such as <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#disp"
              >disp</link></code> or <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#equiv"
              >equiv</link></code>. Attributes <code>fs</code> and <code>subFs</code> defined in the
          XLIFF Format Style Module are also considered <firstterm>context hints</firstterm>.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>inline codes</glossterm>
      <glossdef>
        <para><code>&lt;sc/></code>/<code>&lt;ec></code> pairs, orphaned <code>&lt;sc/></code> or
            <code>&lt;ec/></code>, well formed <code>&lt;pc></code>, standalone
            <code>&lt;ph/></code> and <code>&lt;cp></code> are inline codes used to represent native
          format inline markup in <firstterm>XLIFF Documents</firstterm>.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>markers</glossterm>
      <glossdef>
        <para><code>&lt;sm/></code>/<code>&lt;em/></code> pairs and well formed
            <code>&lt;mrk></code> are <firstterm>XLIFF defined</firstterm> inline marker elements
          designed for inline annotations of content with metadata. <note>
            <para>Markers are distinct from <firstterm>inline codes</firstterm> (see). Markers can
              be combined with standoff elements for rich metadata that would be complicated or
              impossible to display inline.</para>
          </note></para>
      </glossdef>
    </glossentry>
  </glossary>
  <section xml:id="Intro">
    <title>Introduction</title>
    <para>This &releaseinfo; targets designers of XLIFF <firstterm>Extracting</firstterm> and
        <firstterm>Merging</firstterm> Tools for content owners. <firstterm>XLIFF
        Roundtrip</firstterm> designers of all kinds will benefit, no matter if they design their
        <firstterm>XLIFF Extractor/Merger</firstterm> for corporate or blog use.</para>
    <para><firstterm>Extraction</firstterm> and <firstterm>Merging</firstterm> behavior is out of
      the normative scope of OASIS XLIFF Specifications. Although those specifications do provide
      some guidance for <firstterm>Extractor</firstterm> and <firstterm>Merger Agents</firstterm>,
      XLIFF TC did not attempt to prescribe how exactly to use XLIFF to represent native content.
      This is mostly because XLIFF is a native-format-agnostic Localization Interchange
      Format.</para>
    <para>This specification gathers common problems that are prone to appear when Extracting XLIFF
      Documents from HTML, generic XML, or MarkDown. This specification shows why some
        <firstterm>Extraction</firstterm> approaches will cause issues during an <firstterm>XLIFF
        Roundtrip</firstterm>, issues often so severe that <firstterm>Merging</firstterm> back of
      target content will not be possible without costly post-processing or could fail utterly. This
      best practice guidance provides better thought through alternatives and shows how to use many
      of advanced XLIFF features for lossless Localization roundtrip of HTML and XML based content.
      Most of the times there are no ultimate prescribed solutions, rather possible design goals are
      described and best methods how to achieve them proposed.</para>

  </section>
  <section xml:id="Spec">
    <title>Specification</title>
    <section xml:id="Inlines">
      <title>Inline Codes</title>
      <para>Guidance for processing standalone and spanning inline functional and formatting
        elements of localizable content.<itemizedlist>
          <listitem>
            <para>Perform complete extraction</para>
          </listitem>
          <listitem>
            <para>Represent spanning code using <code><link
                  xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#sc"
                  >&lt;sc/></link></code> and <code><link
                  xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ec"
                  >&lt;ec/></link></code> (or <code><link
                  xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#pc"
                  >&lt;pc>&lt;/pc></link></code> where possible)</para>
          </listitem>
          <listitem>
            <para>Represent standalone code using <code><link
                  xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
                  >&lt;ph></link></code></para>
          </listitem>
          <listitem>
            <para>Include <firstterm>inline codes</firstterm> in <firstterm>Extracted</firstterm>
              content</para>
          </listitem>
          <listitem>
            <para><link
                xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html"
                >XLIFF2 prose</link>.</para>
          </listitem>
        </itemizedlist></para>
      <section xml:id="Spanning">
        <title>Representing Spanning Codes</title>
        <para><firstterm>Spanning codes</firstterm> in the original format are created by opening
          code, content and closing code. In HTML that can be <code>&lt;bold>text&lt;/bold></code>,
          in RTF <code>\b text \b0</code>.</para>
        <para>In XLIFF, such code can be always represented with an <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#sc"
              >&lt;sc/></link></code>/<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ec"
              >&lt;ec/></link></code> pair, or with spanning <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#pc"
              >&lt;pc>&lt;/pc></link></code>, only for well formed markup.</para>
        <para>Ideally, the original format is documented well enough to instruct
            <firstterm>Extractors</firstterm> about the role of each <firstterm>inline
            code</firstterm>. For example, XML Schema allows to declare elements using the keyword
          EMPTY. This way, all elements that are not declared EMPTY, can be represented as described
          above. To further help the <firstterm>Extraction</firstterm> process, the following
          recommendation could be implemented in the original XML format: <quote>For
            interoperability, the empty-element tag SHOULD be used, and SHOULD only be used, for
            elements which are declared EMPTY.</quote><citation>[XML]</citation>.</para>
        <para>Following this recommendation of the XML specification, an empty
            <code>&lt;span></code> ought to be encoded as <code>&lt;span>&lt;/span></code> and
          therefore represented as an <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#sc"
              >&lt;sc/></link></code>/<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ec"
              >&lt;ec/></link></code> pair in <firstterm>XLIFF Documents</firstterm>, unlike the
          always empty <code>&lt;br/></code> that has to be represented as a standalone placeholder
          code <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
              >&lt;ph/></link></code>.</para>
        <para>This concept is illustrated by the <emphasis>bad practice</emphasis> example <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/spanning_as_ph"
              ><code>spanning_as_ph</code></link>.</para>
        <para>This kind of encoding doesn't inform the <firstterm>Translating</firstterm>
          <firstterm>Agent</firstterm> (human or machine <firstterm>Modifier</firstterm>) that the
          original code formed a span and effectively the original spanning code is not protected
          during the roundtrip. The standalone <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
              >&lt;ph/></link></code> codes can be switched, one of them omitted, the span is likely
          to end up misplaced, malformed, or empty simply because the
            <firstterm>Translation</firstterm> editor cannot convey to the translator that the codes
          enclose a certain portion of the original content and what is the semantics of the
          original code span.</para>
      </section>
      <section xml:id="Outermost">
        <title>Outermost Tag Pairs</title>
        <para>In some cases, the <firstterm>inline codes</firstterm> can enclose the localizable
          string in a way that could suggest omitting them in the <firstterm>Extracted</firstterm>
          text. For example, a paragraph containing only a link text, could be
            <firstterm>Extracted</firstterm> as the link text only, without the
            <code>&lt;a>&lt;/a></code> decoration being represented. This relates to the previous
            <emphasis>bad practice</emphasis>
          <link
            xlink:href="https://github.com/GALAglobal/TAPICC/blob/master/extraction_examples/spanning_as_ph/bad_opening_excluded.xlf"
            >example</link> with the spanning tag represented as two empty <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
              >&lt;ph/></link></code> elements.</para>
        <para>In case the <code>&lt;a>&lt;/a></code> decoration is not represented, the translator
          loses valuable context (they cannot check the link), more importantly they don't know that
          the text is a link text, and moreover are unable to add any text outside of the link span,
          which might be advisable or even mandatory in certain locales.</para>
        <para>Ideally, a consistent approach to all <firstterm>inline codes</firstterm> ought to be
          used during <firstterm>Extraction</firstterm>.</para>
        <para>See the relevant <emphasis>bad practice</emphasis> example <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/outermost_inline_excluded"
            >outermost_inline_excluded</link>.</para>
      </section>
      <section xml:id="CDATA">
        <title>Incomplete Extraction of Inline Codes</title>
        <para>Some implementers choose not to <firstterm>Extract</firstterm>
          <firstterm>inline codes</firstterm> at all and use instead one of the following approaches:<itemizedlist>
            <listitem>
              <para>CDATA sections as content of <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#source"
                    >&lt;source></link></code> and <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
                    >&lt;target></link></code> elements (<link
                  xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/cdata"
                  >cdata</link>)</para>
            </listitem>
            <listitem>
              <para>Escaping of native codes using XML entities (<link
                  xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/inline_codes_plain_text"
                  >inline_codes_plain_text</link>)</para>
            </listitem>
          </itemizedlist></para>
        <para>Doing one of the above can be used as a useful interim
            <firstterm>Extraction</firstterm> step when producing <firstterm>XLIFF
            Documents</firstterm> that are fit for roundtrip. However, it is strongly discouraged to
          send <firstterm>XLIFF Documents</firstterm> with the inline content not fully parsed for
          Localization roundtrip.</para>
        <para>Such incomplete <firstterm>Extraction</firstterm> leaves <firstterm>inline
            codes</firstterm> unprotected and increases the risk of their corruption during the
          roundtrip, simply pushing the problem of <firstterm>inline code</firstterm> handling
          downstream.</para>
        <para>According to the XLIFF <citation>[XLIFF-2.1]</citation> Standards,
            <firstterm>Modifiers</firstterm> can perform secondary parsing:</para>
        <para><quote><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#d0e8112"
              >Writers <emphasis>may</emphasis> preserve original CDATA sections</link></quote>
          (meaning that it is entirely optional to preserve CDATA sections and that <firstterm>XLIFF
            Writers</firstterm> are not obliged to preserve CDATA sections) and</para>
        <para>
          <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#d0e8993"
            >text can be converted into inline codes</link>.</para>
        <para><firstterm>Mergers</firstterm>
          <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ApplicationConformance"
            >have to accept XLIFF files with valid modifications</link>, even though <link
            xlink:href="addingcodeshttp://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#addingcodes"
            >they may ignore the added codes</link>.</para>
        <para>Finally, it is considered an <link
            xlink:href="https://www.w3.org/TR/xml-i18n-bp/#AuthCDATA">XML internationalization best
            practice</link> to avoid CDATA sections in localizable content. This best practice is of
          course also valid for XLIFF <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#source"
              >&lt;source></link></code> elements.</para>
        <para>Strictly speaking, it is not illegal to create <firstterm>XLIFF Documents</firstterm>
          that contain CDATA sections or unparsed entities instead of fully parsed XLIFF inline
          content. However, considering all of the above, it is clear that unparsed inline content
          makes XLIFF Documents unfit for a fully interoperable roundtrip. Again, strictly speaking,
            <firstterm>XLIFF Documents</firstterm> with unparsed inline content are
            <emphasis>capable</emphasis> of roundtrip but all the effort that is saved on
            <firstterm>Extraction</firstterm> will cause unpredictable issues and hence even more
          effort when <firstterm>Merging</firstterm> back. </para>
        <para>Implementers need to consider that <firstterm>XLIFF Documents</firstterm> with
          unparsed inline content are very likely to return with critical inline syntax or
          formatting corruptions that cannot be prevented on CDATA sections or entities that are
          both opaque to <firstterm>XLIFF Modifiers</firstterm>. Such corruptions are likely to
          prevent proper functionality of target content in the native environment. In case
            <firstterm>XLIFF Modifiers</firstterm> do perform the secondary parsing of content
          unparsed on <firstterm>Extraction</firstterm>, which is allowed by the standard,
          corruption will be prevented, however, <firstterm>Mergers</firstterm> will need to perform
            <emphasis>unparsing</emphasis> to facilitate merging back into the native environment,
          because XLIFF Modifiers are not and cannot be obliged to <emphasis>unparse</emphasis> back
          to CDATA sections or entities not knowing the <firstterm>Extraction</firstterm> and
            <firstterm>Merging</firstterm> logic of the <firstterm>XLIFF Document</firstterm>
          originator. </para>
      </section>
      <section xml:id="Multiples">
        <title>Representing Multiple Subsequent Codes</title>
        <para>As original <firstterm>inline codes</firstterm> can occur in clusters, for instance as
          nested formatting, implementers could be tempted to combine such markup on
            <firstterm>Extraction</firstterm> and represent it as a single inline element.</para>
        <para>This kind of <firstterm>Extraction</firstterm> is likely to prevent potentially
          desirable <firstterm>Modification</firstterm> of <emphasis>inline codes</emphasis>,
          affecting <firstterm>Translation</firstterm> quality. It will also prevent usage of fine
          grained code metadata (for instance context, display, and editing hints) or automated
          format validation during the roundtrip.</para>
        <para>On the other hand, some potential benefit can be perceived in reducing markup inside
          segment content, which is useful in CAT tools that cannot properly display the inline
          codes (reneder information available through original data or context hints). In such
          tolls, less markup reduces the visual clutter and makes the translatable text more
          readable. This can be solved by proper choice of CAT tools (short term) or by large buyers
          requesting that offending tool vendors do support proper rendering of <firstterm>inline
            code</firstterm> data and metadata (mid and long term).</para>
        <para>Implementers need to consider the pros and cons of both approaches and use the one
          that best matches their business need.</para>
        <para>For examples see <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/multiple_codes_represented_as_single"
            >multiple_codes_represented_as_single</link>.</para>
      </section>
    </section>
    <section xml:id="Target_content">
      <title>Target Content in Extracted XLIFF</title>
      <para>This section focuses on reasons whether or not to populate the <code><link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
            >&lt;target></link></code> element during <firstterm>Extraction</firstterm> or
          <firstterm>Enriching</firstterm> and when to do so, if at all.</para>
      <para>Generally, one should omit the <code><link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
            >&lt;target></link></code> element, unless there is an added value and also in cases
        where the specification offers another dedicated solution. Proper support of the state
        machine<!-- add internal reference --> during the whole roundtrip helps
          <firstterm>Agents</firstterm> to process and validate the <firstterm>XLIFF
          Documents</firstterm> as intended.</para>
      <para>When looking at the situation from the <emphasis>microservices</emphasis> point of view,
        the <firstterm>Extractor</firstterm>/<firstterm>Merger</firstterm> ought to be implemented
        as just that — a single purpose
          <firstterm>Extraction</firstterm>/<firstterm>Merging</firstterm> service that delegates
        any other operations, such as segmentation or <firstterm>Enriching</firstterm> to other
        specialized services.</para>
      <para>Output of such extractor would be a <emphasis>target language</emphasis> agnostic
          <firstterm>XLIFF Document</firstterm> with source content only, possibly with additional
        modules/extensions which could not be generated after extraction, for example <link
          xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#size_restriction_module"
          >Size and Length Restriction Module</link> or <link
          xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#fs-mod"
          >Format Style Module</link>.</para>
      <para>Unless the implementer has a specific need to create <emphasis>target
          language</emphasis> specific instances of the extracted <firstterm>XLIFF
          Document</firstterm>, for instance by <firstterm>Enriching</firstterm> with translation
        candidates, <!-- insert module reference --> the <firstterm>Extracted</firstterm>
        <firstterm>XLIFF Document</firstterm> could and ought to be sent downstream for the
        Localization roundtrip as-is.</para>
      <section xml:id="Source_copy_in_target">
        <title>Inserting Source Content into <code>&lt;target></code></title>
        <para>The copy of the source content in <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> elements generally does not provide any advantage during
          the XLIFF roundtrip. On the contrary, it brings disadvantages such as needlessly
          increasing the size of the <firstterm>XLIFF Document</firstterm> or enforcing existence of
          the <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#trgLang"
              ><code>trgLang</code></link> attribute with a specific BCP 47 compliant value.
          Populated <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> elements are also likely to prevent segmentation
          modification, unless the target content is intentionally removed (which service providers
          are understandably hesitant to do). Not the least issue is that the source content copied
          to the target actually is <emphasis>not</emphasis> in the target language indicated by the
          BCP 47 tag on the XLIFF root element, which can cause a host of other processing issues.
          The <emphasis>bad practice</emphasis> of populating <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> elements with source content used to facilitate parsing and
          editing of XLIFF in <emphasis>Translation</emphasis> editors or generic XML editors that
          didn't have XLIFF support and could only open for translation certain elements in generic
          XML formats. As such, this practice is strongly discouraged.</para>
        <para><emphasis>Bad practice</emphasis> example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/source_in_target"
            >source_in_target</link>.</para>
      </section>
      <section xml:id="Candidates_in_target">
        <title>Inserting Possible Translations into <code>&lt;target></code> elements</title>
        <para><firstterm>Enriching Agents</firstterm> can use translation memories, machine
          translation engines, or other means to obtain suitable translation candidate strings in
          the target language to be used later in the roundtrip, for example as suggestions for
          translators, to achieve better leverage, or to get higher consistency with previous
          translations.</para>
        <para>Using the <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> element for storing such translation candidates limits the
          number of the possible proposed translations to a single one per segment. Moreover, this
          way it's not possible to pass critical metadata about the translation candidate, such as
          its origin, similarity, or quality (all those are available in a dedicated module),
          causing interoperability issues for <firstterm>Agents</firstterm> without prior knowledge
          of the workflow.</para>
        <para>Inserting translation candidates into <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> elements during <firstterm>Extraction</firstterm> or
            <firstterm>Enriching</firstterm> constitutes an illegal overload of the core element
          with a clearly set purpose. The <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#candidates"
            >Translation Candidates Module</link> was designed exactly to provide translators with
          multiple translation candidates along with metadata that facilitate decision making and
          effective reuse.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/pre-populated_target"
            >pre-populated_target</link>.</para>
      </section>
      <section xml:id="State_Machine">
        <title> State Machine</title>
        <para>The XLIFF specification contains attributes for managing a segment state machine. The
          attributes used are <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#state"
              >&lt;state></link></code> and <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#substate"
              >&lt;subState></link></code>. The <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#substate"
              >&lt;subState></link></code> attribute can only be used as long as the <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#state"
              >&lt;state></link></code> attribute is used. The <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#state"
              >&lt;state></link></code> attribute is for high level interoperability. The <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#substate"
              ><code>&lt;subState></code></link> attribute allows implementers to define private
          sub-state machines that can give more fine-grained sub-states based on their private
          workflow needs. </para>
        <para> The <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#state"
              >&lt;state></link></code> attribute defines just a high level four states state
          engine. The values are <code>initial</code>, <code>translated</code>,
            <code>reviewed</code>, and <code>final</code>. Although this attribute is
            <glossterm>optional</glossterm> on the <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#segment"
              ><code>&lt;segment></code></link> element, it is assumed as having the default value
            <code>initial</code> whenever not used explicitly. There are some important advantages
          to using the state machine explicitly. Importantly, <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> elements are optional in the <code>initial</code> state. So
          if you want to even enforce <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> existence in your deliverables you should be using at least
          the high level four states state engine provided by the <firstterm>Core</firstterm>
          attribute <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#state"
              >state</link></code>. Setting the <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#state"
              >state</link></code> attribute of a <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#segment"
              ><code>&lt;segment></code></link> to <code>translated</code> or later does enforce
              <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> existence within that segment. </para>
        <para>Using the high level states <code>reviewed</code> and <code>final</code> gives you
          even more control over the progressive validation of the <firstterm>XLIFF
            Documents</firstterm> you're roundtripping. All of the states <code>translated</code>,
            <code>reviewed</code>, and <code>final</code> will trigger validation of the inline data
          model within <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/os/xliff-core-v2.1-os.html#target"
              >&lt;target></link></code> elements, which is not being validated in the
            <code>initial</code> state where even the existence of <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              >&lt;target></link></code> elements is not assumed. Violations of the inline data
          model including Editing hints are being tested in all states more advanced than
            <code>initial</code>. Those violations are considered "Warnings" at
            <code>translated</code> and <code>reviewed</code> states. Only in the <code>final</code>
          state, those violations will become actual "Errors" that render the <firstterm>XLIFF
            Document</firstterm> invalid.</para>
      </section>
    </section>
    <section xml:id="Hints">
      <title>Editing and Context Hints</title>
      <para>The XLIFF specification provides a number of attributes that allow to manage the
        behavior and validation of structural and inline elements; such as controlling the
        localizability of text; protecting non-deletable inline codes, or preserving their order;
        controlling the segmentation modification; or providing additional context to other agents
        downstream.</para>
      <para>The default values of the editing hints and potential need to set them otherwise need to
        be considered when creating <firstterm>Extraction</firstterm> rules to prevent issues which
        can be only identified by automated validation with editing hints set as intended.</para>
      <section xml:id="canDelete">
        <title>Non-deletable Inline Codes</title>
        <para>Original source text can contain functional inline codes apert from formatting ones,
          such as software placeholders to be replaced during runtime. Removal of these placeholders
          or other functional code, either intentional or accidental, during the
            <firstterm>Translation</firstterm> roundtrip can produce valid <firstterm>XLIFF
            Documents</firstterm> that will nevertheless fail to merge back, cause build failures
          later on, or create other functional issues in the <firstterm>Translated</firstterm>
          product.</para>
        <para>The XLIFF specification provides the editing hint <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#candelete"
              >canDelete</link></code> with its default value set to <code>yes</code> that is thus
          automatically used or can be explicitly set on any inline code. For most of the formatting
          codes, the default value <code>yes</code> is fine, so that there is no need to set the
          attribute explicitly most of the times. The default value means that the codes can be
          removed during localization as the translators see fit. A typical example is the need to
          remove italics or bold formatting codes in Chinese or Japanese target content. These
          languages don't use typographical methods of emphasis and non-deletable formatting codes
          tend to complicate life of translators into such languages. On the other hand,
            <firstterm>Extractors</firstterm> need to take care to set the <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#candelete"
              >canDelete</link></code> attribute to <code>no</code> explicitly whenever an inline
          code is critical for <firstterm>Merging</firstterm> back of the <firstterm>XLIFF
            Document</firstterm>, their build process, or product functionality.</para>
      </section>
      <section xml:id="canReorder">
        <title> Preserving Order of Codes</title>
        <para>In case the order or nesting of inline codes in the original document is prescribed
          (for instance by a schema), it has to be preserved in the target content during the
          localization roundtrip to prevent <firstterm>Merge</firstterm> issues, or validation fails
          after <firstterm>Merging</firstterm>.</para>
        <para>The attribute <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#canreorder"
              >canReorder</link></code> on the inline code determines, whether each code can be
          moved before, or after another code. Again, the default value of this attribute is
            <code>yes</code> meaning that the inline codes can be reordered as the translators see
          fit.</para>
        <para>This attribute is used to create and protect non-reorderable sequences of inline codes
          if necessary for proper inline code functionality. </para>
        <example>
          <title>Example of a non-reorderable source sequence of inline codes</title>
          <programlisting>...
&lt;source>&lt;pc id="1" canCopy="no" canDelete="no" canReorder="firstNo">
            &lt;pc id="2" canCopy="no" canDelete="no" canReorder="no">this is linktext&lt;/pc>
            &lt;ph id="3" canCopy="no" canDelete="no" canReorder="no"/>
         &lt;/pc>
&lt;/source>            
...          </programlisting>
        </example>

        <para>Since this attribute is supported by native XLIFF validation artifacts
            (<firstterm>XLIFF Core</firstterm> Schematron Schemas), potential reordering of the
              <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#pc"
              >&lt;pc/></link></code> and <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
              >&lt;ph/></link></code> tags in the corresponding <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#target"
              ><code>&lt;target></code></link> element will be called out when validating <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#segment"
              ><code>&lt;segment></code></link> elements with the state more advanced than
            <code>initial</code>. See also the <link linkend="State_Machine">Sate Machine</link>
          section.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/editing_hints_canReorder"
            >editing_hints_canReorder</link>.</para>
      </section>
      <section xml:id="canResegment">
        <title>Controlling Segmentation</title>
        <para>Depending on <firstterm>Extraction</firstterm> rules for mapping of original document
          structures into <firstterm>XLIFF Documents</firstterm>, individual sentences within a
          paragraph, verses within a stanza, items or entries of a list, rows, or cells of a table,
          items of a dialog window and so on will be extracted as segments of a single unit.</para>
        <para>While it's generally desirable to be able to <firstterm>Modify</firstterm>
          segmentation within a unit during the roundtrip, doing so in some of the above cases might
          prevent merging, cause build issues, or have negative impact on target product user
          experience.</para>
        <para>Attribute <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#canresegment"
              >canResegment</link></code> can be used with care to control segmentation
            <firstterm>Modification</firstterm> behavior. It’s value can be controlled by rules
          devised from logic based on role of structural and inline codes of native format, e.g. set
          to <code>no</code> for:<itemizedlist>
            <listitem>
              <para>lists</para>
            </listitem>
            <listitem>
              <para>tables or table rows</para>
            </listitem>
            <listitem>
              <para>UI elements</para>
            </listitem>
          </itemizedlist></para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/mapping_to_unit"
            >mapping_to_unit</link>.</para>
        <para>On the other hand, it is advisable not to change the default behavior </para>
      </section>
      <section xml:id="context">
        <title>Providing Context</title>
        <para>The actors in the roundtrip, be it humans or machines, need enough information to make
          appropriate decision regarding operations on inline codes, and how the codes impact the
          adequacy and fluency of target text, i. e. the context.</para>
        <para>These additional metadata can be provided using <firstterm>context hints</firstterm>
          attributes: <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#disp"
              >disp</link></code> (<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#dispstart"
              >dispStart</link></code>/<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#dispend"
              >dispEnd</link></code>), <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#equiv"
              >equiv</link></code> (<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#equivstart"
              >equivStart</link></code>/<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#equivend"
              >equivEnd</link></code>), <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#type"
              >type</link></code>, and <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#subtype"
              >subType</link></code>.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/context_hints"
            >context_hints</link>.</para>
      </section>
      <section xml:id="canOverlap">
        <title>Considerations for Using Spanning Codes</title>
        <para>Compared to <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#pc"
              >&lt;pc></link></code> pair, which can be used to represent only well-formed spanning
          codes within single <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#segment"
              >&lt;segment></link></code>, the more universal <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#sc"
              >&lt;sc></link></code>/<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ec"
              >&lt;ec></link></code> can handle segmentation changes; span across units; and even
          represent orphaned, or overlapping codes.</para>
        <para>The support for overlapping codes can, however, pose a problem in a situation, where
              <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#sc"
              >&lt;sc></link></code>/<code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ec"
              >&lt;ec></link></code> are used to represent multiple well-formed spanning codes
          within a unit and their <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#canoverlap"
              >canOverlap</link></code> attribute is not specified, thus the default value
            <code>yes</code> is used. In such case the well-formedness can be corrupted during the
          roundtrip without possibility to validate using native XLIFF capabilities.</para>
        <para>It's thus recommended to set <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#canoverlap"
              >canOverlap</link></code> to <code>no</code> when representing well-formed spanning
          codes.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/editing_hints_canOverlap"
            >editing_hints_canOverlap</link>.</para>
      </section>
    </section>
    <section xml:id="XLIFF_Structure">
      <title>XLIFF Structure</title>
      <para>Taking time to consider not only what to extract, but how to extract it, and how to
        structure the <firstterm>XLIFF document</firstterm> can significantly reduce number of
        issues during the roundtrip and enable usage of additional features offered by XLIFF
        spec.</para>
      <section xml:id="group">
        <title>File Structure</title>
        <para>Native file format can contain structural elements dividing its content into parts,
          such as title, body, header and footer, or tables, lists and divs for markup languages; or
          windows, dialogs, and menus for software resources. </para>
        <para>Representing native structural elements in XLIFF using nested <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#group"
              >&lt;group></link></code> elements can be useful for providing, and correctly scoping: <itemizedlist>
            <listitem>
              <para>additional context (<code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#name"
                    >name</link></code>, <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#type"
                    >type</link></code>, <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#subtype"
                    >subType</link></code>, attributes from <link
                  xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#fs-mod"
                  >Format Style Module</link>)</para>
            </listitem>
            <listitem>
              <para>restrictions (<code>canResegment</code>, <code>translate</code>, attributes from
                  <link
                  xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#size_restriction_module"
                  >Size and Length Restriction Module</link>)</para>
            </listitem>
            <listitem>
              <para>whitespaces handling (<code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#xml_space"
                    >xml:space</link></code>)</para>
            </listitem>
            <listitem>
              <para>information from modules:<itemizedlist>
                  <listitem>
                    <para><link
                        xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#metadata_module"
                        >Metadata</link></para>
                  </listitem>
                  <listitem>
                    <para><link
                        xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#validation_module"
                        >Validation</link></para>
                  </listitem>
                  <listitem>
                    <para><link
                        xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ITS-module"
                        >ITS</link></para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
        <para>Most of the above can still be achieved without the <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#group"
              >&lt;group></link></code>s at the cost of high redundancy and overloading some of the
          XLIFF features. </para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/group"
            >group</link>.</para>
      </section>
      <section xml:id="unit">
        <title>Role of <code>&lt;unit></code></title>
        <para>Extractor sets the XLIFF structure, which cannot be modified during the roundtrip
          above the &lt;unit> level. Appropriate relationship between structures of native format
          and <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#unit"
              >&lt;unit></link></code> can make all the difference between hindering the roundtrip
          and making the most of XLIFF.</para>
        <para>Problems can be caused by both extremes: too many and not enough <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#unit"
              >&lt;unit></link></code>s.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/mapping_to_unit"
            >mapping_to_unit</link>.</para>
      </section>
    </section>
    <section xml:id="miscellaneous">
      <title>Miscellaneous</title>
      <para>There are many other concepts, which does not belong to a particular category with some
        of them listed here.</para>
      <section xml:id="id_attribute">
        <title>Value of attribute <code>id</code></title>
        <para>Implementers could be tempted to store values of resource Ids in the <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#id"
              >id</link></code> attribute of XLIFF structural elements. While the attribute value is
          restricted to <firstterm>NMTOKEN</firstterm> by schema, the native format may not have
          such restrictions. Invalid characters in <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#id"
              >id</link></code> would be discovered as soon as the first validation occurs, though
          it can still be costly to fix in the long running projects.</para>
        <para>Instead, XLIFF’s <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#name"
              >name</link></code> is designed to store the original identifier of the resource,
          without the risk of possible conflicts due to <firstterm>NMTOKEN</firstterm> restrictions.
          Alternatively, <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#original"
              >original</link></code> can be used on <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#file"
              >&lt;file></link></code> for the same purpose.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/id_and_name"
            >id_and_name</link>.</para>
      </section>
      <section xml:id="whitespaces">
        <title>Whitespace Handling</title>
        <para>Whitespaces can be important inside nodes like <code>&lt;pre></code>, containing e.g.
          code samples, and modifying them during roundtrip is not desirable.</para>
        <para>They are, however, often insignificant in the text nodes of markup format, such as XML
          or HTML, and can be modified by, for example, reformatting and indentation (i. e.
          pretty-print) without affecting the layout or rendered document.</para>
        <para>Thus one cannot indiscriminately either preserve, or normalize; as in the former case,
          with most TMS and CAT tools penalizing whitespace discrepancies, the leverage would be
          negatively affected; and in the latter, the target layout could be corrupted.</para>
        <para>Generally, the <firstterm>Extractor</firstterm> itself should normalize native content
          where possible, not relying on other agents in the roundtrip to do that, thus ensuring
          consistent approach; and protect XLIFF structural elements with <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#xml_space"
              >xml:space</link></code> set to <code>preserve</code> where necessary.</para>
        <para>Additional details in the <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#preserve_space"
            >XLIFF spec</link>. </para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/xml_space_preserve"
            >xml_space_preserve</link>.</para>
      </section>
      <section xml:id="non-localizables">
        <title>Protecting Non-localizable Content</title>
        <para>There are cases, when it's necessary to protect parts of the text exposed to
          localization, be it terminology, or functional string, i.e. software placeholders, during
          a localization roundtrip.</para>
        <para>XLIFF offers two options:<itemizedlist>
            <listitem>
              <para><link
                  xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#translateAnnotation"
                  >translate annotations</link></para>
            </listitem>
            <listitem>
              <para><code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
                    >&lt;ph></link></code></para>
            </listitem>
          </itemizedlist></para>
        <para>each of them having a slightly different purpose and features.</para>
        <para>A care should be taken when deciding which of the two should be used to protect the
          particular string, and they should not be used interchangeably.</para>
        <para>Usually, the translate annotation is suitable for protecting linguistically
          significant content, e. g. non-localizable terminology, while <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
              >&lt;ph></link></code> is better for representing standalone codes.</para>
        <note>
          <itemizedlist>
            <listitem>
              <para>The <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ph"
                    >&lt;ph></link></code> element should be accompanied by appropriate <link
                  linkend="Hints">context and editing hints</link>.</para>
            </listitem>
            <listitem>
              <para><link linkend="validations">XLIFF validations</link> do not support validating
                translate annotations by design. If the validation is required, it should be created
                based on particular business needs.</para>
            </listitem>
          </itemizedlist>
        </note>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/ph_and_mrk"
            >ph_and_mrk</link>.</para>
      </section>
      <section xml:id="merging">
        <title>Merging Translated Content</title>
        <para>The <firstterm>Modifiers</firstterm> can perform various <emphasis>valid</emphasis>
          modifications during a roundtrip the XLIFF compliant <firstterm>Mergers</firstterm> need
          to be able to correctly handle.</para>
        <para>These operations are (in no particular order):<itemizedlist>
            <listitem>
              <para>segmentation modification</para>
            </listitem>
            <listitem>
              <para>content enrichment with annotations</para>
            </listitem>
            <listitem>
              <para>adding, and removing inline codes</para>
            </listitem>
            <listitem>
              <para>convert CDATA sections and text into codes</para>
            </listitem>
            <listitem>
              <para>use <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#pc"
                    >&lt;pc></link></code>, and <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#sc"
                    >&lt;sc></link></code>, <code><link
                    xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#ec"
                    >&lt;ec></link></code> interchangeably (for well-formed spanning codes)</para>
            </listitem>
            <listitem>
              <para>perform other changes allowed by Processing Requirements</para>
            </listitem>
          </itemizedlist></para>
        <para>Extraction not following the best practices usually just shifts the problems further
          downstream, requiring other agents to mitigate, creating unpredictable results.</para>
        <para>Additional guidance is also available in the <link
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#d0e11123"
            >XLIFF spec</link>.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/merging"
            >merging</link>.</para>
      </section>
      <section xml:id="langtags">
        <title>Selecting Language Tags</title>
        <para>The agents in the roundtrip; machine, and human; need to be able to sufficiently
          identify the languages used in the XLIFF document, specified by attributes <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#srcLang"
              >srcLang</link></code>, <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#trgLang"
              >trglang</link></code>, and <code><link
              xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html#xml_lang"
              >xml:lang</link></code>.</para>
        <para>While usually not an issue for languages like Slovak (<emphasis>sk</emphasis>), it
          becomes a more prominent question for languages used in different regions, such as English
            (<emphasis>en-GB</emphasis>, <emphasis>en-US</emphasis>); using various scripts, for
          example Uyghur (<emphasis>ug-Arab</emphasis>, <emphasis>ug-Cyrl</emphasis>,
            <emphasis>ug-Latn</emphasis>); or having multiple variants like Basic English
            (<emphasis>en-basiceng</emphasis>).</para>
        <para>The use cases for the correct language tags vary from simple, such as spell-check,
          which will behave quite differently for <emphasis>en-GB</emphasis>, compared to
            <emphasis>en-basiceng</emphasis>; to more complex, like using <emphasis>fr-FR</emphasis>
          as reference language for <emphasis>fr-CA</emphasis> translation.</para>
        <para>Even the MT engines would return a <emphasis>sr-Cyrl</emphasis> output, when the
          request contains language tag <emphasis>sr</emphasis>, even though user might expect
            <emphasis>sr-Latn</emphasis>.</para>
        <para>The XLIFF spec prescribes <link linkend="bcp47">BCP 47</link> language tags are to be
          used as values for attributes describing languages used in the XLIFF document. Unicode
          offer a <link xlink:href="http://unicode.org/cldr/utility/languageid.jsp">tool available
            online</link>, which can help to perform basic validation on selected language
          tag.</para>
        <para>Generally, a care should be taken when selecting descriptor for source, target, and
          reference languages in the XLIFF document, and it could be worth the time to consult
          external resources, or language experts; even more so, if the you are not familiar with
          the language in question.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/language_tags"
            >language_tags</link>.</para>
      </section>
      <section xml:id="sanity_checks">
        <title>Validation of Extracted Content</title>
        <para>The native document can contain various reserved characters, or their sequences for
          structural, and inline markup, as well as for programmatic purposes. While not violating
          XLIFF constraints and PRs, their incidence in extracted content could point out issues in
          extraction process.</para>
        <para>One could implement a <emphasis>sanity check</emphasis> for the
            <firstterm>Extractor</firstterm>'s output, which would identify potential problems by
          looking for such characters, or sequences of them. Failing the sanity check would ideally
          interrupt the roundtrip as early as possible, allow to update the extraction rules, and
          redo the extraction, to prevent problems farther downstream.</para>
        <para>Example: <link
            xlink:href="https://github.com/GALAglobal/TAPICC/tree/master/extraction_examples/sanity_check"
            >sanity_check</link>.</para>
      </section>
    </section>
    <section xml:id="validations">
      <title>XLIFF Validations</title>
      <para>Since XLIFF is a roundtrip oriented format that is supposed to facilitate complex
        workflows bringing together best of breed specialized agents, it makes big business sense to
        validate. In fact successful validation on every input and output step is the critical
        factor for successful "blind", plug-and-play, or unsupervised interoperability. If you are
        designing a service architecture facilitated by XLIFF as the canonical data model, or if you
        are otherwise integrating many services that are consuming and outputting XLIFF, it makes
        sense to expose XLIFF validation as a reusable microservice that is freely available and
        even mandated in your ecosystem, service layer, or service bus. When your tool is supposed
        to receive XLIFF, check first if the XLIFF you are trying to consume is indeed valid. Also
        if you are outputting XLIFF that other agents or service providers are supposed to consume,
        do check that you are outputting valid XLIFF.</para>
      <para>XLIFF is a format that has been blessed with multiple low level implementations,
        therefore you have also multiple options for XLIFF validation. Since XLIFF Version 2.1 most
        of the advanced validation checks that required custom code in XLIFF 2.0 can be validated
        using XLIFF TC provided Schematron schemas that are in fact an integral normative part of
        the OASIS Standard. XLIFF TC provided artifacts (xsd, sch, and NVDL) can be used for
        validation in any XML editor. However, if you are trying to design an automated workflow
        you'd not typically rely on manual or semi-automated validation in XML editors, you ought
        rather try and build a service that is for instance using the xslt rendering of the
        Schematron schemas or create a service out of the command line Lynx service that is part of
        the OAKAPI XLIFF Toolkit. </para>
    </section>
  </section>
  <section xml:id="Summary">
    <title>Summary</title>
    <para />
  </section>
  <bibliography xml:id="references">
    <title>References</title>
    <bibliodiv>
      <title>Normative references</title>
      <bibliomixed><abbrev>XML</abbrev>W3C: <title>Extensible Markup Language (XML)
          1.0</title><date>26 November 2008</date>
        <bibliomisc><link xlink:href="https://www.w3.org/TR/xml/" /></bibliomisc></bibliomixed>
      <bibliomixed>
        <abbrev>XLIFF-2.1</abbrev>Edited by David Filip, Tom Comerford, Soroush Saadatfar, Felix
        Sasaki, and Yves Savourel: <title>XLIFF Version 2.1</title><date>13 February 2018</date>
        <bibliomisc><link version="OASIS Standard"
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/os/xliff-core-v2.1-os.html"
             /><link version="latest"
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.1/xliff-core-v2.1.html"
           /></bibliomisc>
      </bibliomixed>
      <bibliomixed>
        <abbrev>XLIFF-2.0</abbrev>Edited by Tom Comerford, David Filip, Rodolfo M. Raya, and Yves
        Savourel: <title>XLIFF Version 2.0</title><date>04 August 2014</date>
        <bibliomisc><link version="OASIS Standard"
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html"
             /><link version="latest"
            xlink:href="http://docs.oasis-open.org/xliff/xliff-core/v2.0/xliff-core-v2.0.html"
           /></bibliomisc>
      </bibliomixed>
      <bibliomixed>
        <abbrev>ISO XLIFF</abbrev> Edited by Tom Comerford, David Filip, Rodolfo M. Raya, and Yves
        Savourel: <title>ISO 21720:2017 - XLIFF (XML Localisation interchange file
          format)</title><date>November 2017</date>
        <bibliomisc><link version="International Standard"
            xlink:href="https://www.iso.org/standard/71490.html" /></bibliomisc>
      </bibliomixed>
      <bibliomixed xml:id="bcp47"><emphasis role="bold">BCP 47</emphasis> M. Davis, <emphasis role="italic">Tags
          for Identifying Languages</emphasis>, <emphasis role="italic"><link
            xlink:href="http://tools.ietf.org/html/bcp47"
          >http://tools.ietf.org/html/bcp47</link></emphasis> IETF (Internet Engineering Task
        Force).</bibliomixed>
    </bibliodiv>
  </bibliography>
</article>